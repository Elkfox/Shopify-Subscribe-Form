/*********************************
  ___  _   _    _            
 /   || | | |  | |           
 \__  | | | |  | |  __       
 /    |/  |/_) |/  /  \_/\/  
 \___/|__/| \_/|__/\__/  /\_/
               |\            
               |/            

Email Popup 1.0
by Abinav Thakuri
Copyright (c) 2014 Elkfox
http://elkfox.com
Licensed under the GNU General Public License as published by the Free Software Foundation: http://opensource.org/licenses/GPL-3.0
*********************************/


(function (CoverPop, undefined) {

    'use strict';

    // set default settings
    var settings = {

            // set default cover id
            coverId: 'CoverPop-cover',

            // duration (in days) before it pops up again
            expires: 30,

            // close if someone clicks an element with this class and prevent default action
            closeClassNoDefault: 'CoverPop-close',

            // close if someone clicks an element with this class and continue default action
            closeClassDefault: 'CoverPop-close-go',

            // change the cookie name
            cookieName: '_CoverPop',

            // on popup open function callback
            onPopUpOpen: null,

            // on popup close function callback
            onPopUpClose: null,

            // hash to append to url to force display of popup
            forceHash: 'splash',

            // hash to append to url to delay popup for 1 day
            delayHash: 'go',

            // close if the user clicks escape
            closeOnEscape: true,

            // set an optional delay (in milliseconds) before showing the popup
            delay: 0
        },


        // grab the elements to be used
        $el = {
            html: document.getElementsByTagName('html')[0],
            cover: document.getElementById(settings.coverId),
            closeClassDefaultEls: document.querySelectorAll('.' + settings.closeClassDefault),
            closeClassNoDefaultEls: document.querySelectorAll('.' + settings.closeClassNoDefault)
        },


        /**
         * Helper methods
         */

        util = {

            hasClass: function(el, name) {
                return new RegExp('(\\s|^)' + name + '(\\s|$)').test(el.className);
            },

            addClass: function(el, name) {
                if (!util.hasClass(el, name)) {
                    el.className += (el.className ? ' ' : '') + name;
                }
            },

            removeClass: function(el, name) {
                if (util.hasClass(el, name)) {
                    el.className = el.className.replace(new RegExp('(\\s|^)' + name + '(\\s|$)'), ' ').replace(/^\s+|\s+$/g, '');
                }
            },

            addListener: function(target, type, handler) {
                if (target.addEventListener) {
                    target.addEventListener(type, handler, false);
                } else if (target.attachEvent) {
                    target.attachEvent('on' + type, handler);
                }
            },

            removeListener: function(target, type, handler) {
                if (target.removeEventListener) {
                    target.removeEventListener(type, handler, false);
                } else if (target.detachEvent) {
                    target.detachEvent('on' + type, handler);
                }
            },

            isFunction: function(functionToCheck) {
                var getType = {};
                return functionToCheck && getType.toString.call(functionToCheck) === '[object Function]';
            },

            setCookie: function(name, days) {
                var date = new Date();
                date.setTime(+ date + (days * 86400000));
                document.cookie = name + '=true; expires=' + date.toGMTString() + '; path=/';
            },

            hasCookie: function(name) {
                if (document.cookie.indexOf(name) !== -1) {
                    return true;
                }
                return false;
            },

            // check if there is a hash in the url
            hashExists: function(hash) {
                if (window.location.hash.indexOf(hash) !== -1) {
                    return true;
                }
                return false;
            },

            preventDefault: function(event) {
                if (event.preventDefault) {
                    event.preventDefault();
                } else {
                    event.returnValue = false;
                }
            },

            mergeObj: function(obj1, obj2) {
                for (var attr in obj2) {
                    obj1[attr] = obj2[attr];
                }
            }
        },


        /**
         * Private Methods
         */

        // close popup when user hits escape button
        onDocUp = function(e) {
            if (settings.closeOnEscape) {
                if (e.keyCode === 27) {
                    CoverPop.close();
                }
            }
        },

        openCallback = function() {

            // if not the default setting
            if (settings.onPopUpOpen !== null) {

                // make sure the callback is a function
                if (util.isFunction(settings.onPopUpOpen)) {
                    settings.onPopUpOpen.call();
                } else {
                    throw new TypeError('CoverPop open callback must be a function.');
                }
            }
        },

        closeCallback = function() {

            // if not the default setting
            if (settings.onPopUpClose !== null) {

                // make sure the callback is a function
                if (util.isFunction(settings.onPopUpClose)) {
                    settings.onPopUpClose.call();
                } else {
                    throw new TypeError('CoverPop close callback must be a function.');
                }
            }
        };



    /**
     * Public methods
     */

    CoverPop.open = function() {

        var i, len;

        if (util.hashExists(settings.delayHash)) {
            util.setCookie(settings.cookieName, 1); // expire after 1 day
            return;
        }

        util.addClass($el.html, 'CoverPop-open');

        // bind close events and prevent default event
        if ($el.closeClassNoDefaultEls.length > 0) {
            for (i=0, len = $el.closeClassNoDefaultEls.length; i < len; i++) {
                util.addListener($el.closeClassNoDefaultEls[i], 'click', function(e) {
                    if (e.target === this) {
                        util.preventDefault(e);
                        CoverPop.close();
                    }
                });
            }
        }

        // bind close events and continue with default event
        if ($el.closeClassDefaultEls.length > 0) {
            for (i=0, len = $el.closeClassDefaultEls.length; i < len; i++) {
                util.addListener($el.closeClassDefaultEls[i], 'click', function(e) {
                    if (e.target === this) {
                        CoverPop.close();
                    }
                });
            }
        }

        // bind escape detection to document
        util.addListener(document, 'keyup', onDocUp);
        openCallback();
    };

    CoverPop.close = function(e) {
        util.removeClass($el.html, 'CoverPop-open');
        util.setCookie(settings.cookieName, settings.expires);

        // unbind escape detection to document
        util.removeListener(document, 'keyup', onDocUp);
        closeCallback();
    };

    CoverPop.init = function(options) {
        if (navigator.cookieEnabled) {
            util.mergeObj(settings, options);

            // check if there is a cookie or hash before proceeding
            if (!util.hasCookie(settings.cookieName) || util.hashExists(settings.forceHash)) {
                if (settings.delay === 0) {
                    CoverPop.open();
                } else {
                    // delay showing the popup
                    setTimeout(CoverPop.open, settings.delay);
                }

            }
        }
    };

    // alias
    CoverPop.start = function(options) {
        CoverPop.init(options);
    };


}(window.CoverPop = window.CoverPop || {}));

setTimeout(function(){
CoverPop.start({
    expires: 30
});
},2000); // 2000ms = 2 seconds


$ = jQuery; // Make sure its defined

$.fn.alajax = function (options){
    // sgObj is a holder for #gallery container.. Cashing it.
    var aObj = $(this); // contaciner object
    var aForm = ($(this).is('form') ? $(this):$(this).find('form').eq(0)); // Storing Form object
    var oid = $(this).attr('id'); // Storing the ID of current Object
    
    // Default settings.
    var settings = {
        type: 'text',   // 'text', 'json' or 'xml'
        success: function(){},
        error: function (){},
        beforeSend: function (){},
        postType: aForm.attr('method'), // Storing Form method.. POST or GET
        tourl: aForm.attr('action') // Storing URL to send data to
    };
    settings = $.extend(settings, options);
    
    function _sendData(){
        // Run AJAX function
        $.ajax({
            type: settings.postType,
            url: settings.tourl,
            data: aForm.serialize(),
            dataType: settings.type,
            beforeSend: function (){
                // add code here if you want to do something before sending the form
                settings.beforeSend();
            },
            success: function(data, textStatus, jqXHR){
                // Add code here when send is successful.
                settings.success(data);
            },
            error: function (jqXHR, textStatus, errorThrown){
                //alert(errorThrown);
                settings.error();
            }
            
        });
    }
    
    /**
     * The initializer for this plugin.
     */
    function _init(){
        aForm.submit(function (event){
            _sendData(); // Processing
            event.preventDefault(); // To disable form submitting. Submit will be by AJAX only using the function above.
        });
    }
    
    return _init();
}
// END of Plugin // Ajaxify Form Submits
$(document).ready(function (){
    $('#CoverPop-content form').alajax({
     {% assign mailchimp == true %}
     {% if mailchimp != true %}
      error : function(){
    $('#CoverPop-content form').html("<div id='success_message'></div>");
      $('#success_message').html("<h2>Almost done.....</h2>")
      .append("<p>We need to confirm your email address. To complete the subscription process, please click the link in the email we just sent you.</p>")
      .hide()
      .fadeIn(500, function() {
      });
    }
      {% else %}
      success : function(){
    $('#CoverPop-content form').html("<div id='success_message'></div>");
      $('#success_message').html("<h2>Subscription Confirmed</h2>")
      .append("<p>Your subscription to our list has been confirmed. Thank you for subscribing!</p>")
      .hide()
      .fadeIn(500, function() {
      });
    }
      {% endif %}
    });
});
